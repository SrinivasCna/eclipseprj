Singleton Method Design Pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. What is Singleton Method Design Pattern?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The Singleton method or Singleton Design pattern ensures a class only has one instance, 
and provides a global point of access to it.

2. When to use Singleton Method Design Pattern?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Singleton classes are used for logging, driver objects, caching, and thread pool, 
database connections.

Initialization Types of Singleton
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Singleton class can be instantiated by two ways:
1. Eager initialization
2. Lazy initialization

1. Eager initialization:
- In this method, class is initialized whether it is to be used or not. 
- The main advantage of this method is its simplicity. 
- You initiate the class at the time of class loading. 
- Its drawback is that class is always initialized whether it is being used or not.

2. Lazy initialization:
- In this method, class in initialized only when it is required. 
- It can save you from instantiating the class when you donâ€™t need it. 
- Generally, lazy initialization is used when we create a singleton class.

Key Component of Singleton Method Design Pattern:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Static Member
2. Private Constructor
3. Static Factory Method

1. Static Member:
~~~~~~~~~~~~~~~~~~
The Singleton pattern or pattern Singleton employs a static member within the class. 
This static member ensures that memory is allocated only once, preserving the 
single instance of the Singleton class.

2. Private Constructor:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The Singleton pattern or pattern singleton incorporates a private constructor, 
which serves as a barricade against external attempts to create instances of 
the Singleton class. 
This ensures that the class has control over its instantiation process.

3. Static Factory Method:
~~~~~~~~~~~~~~~~~~~~~~~~~~
A crucial aspect of the Singleton pattern is the presence of a static factory method. 
This method acts as a gateway, providing a global point of access to the Singleton object. 
When someone requests an instance, this method either creates a 
new instance (if none exists) or returns the existing instance to the caller.